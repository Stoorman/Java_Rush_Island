package com.javarush.NWA51.Poltavets.island.entity;

import com.javarush.NWA51.Poltavets.island.entity.herbivore.GrassEater;
import com.javarush.NWA51.Poltavets.island.entity.predator.AnimalEater;
import com.javarush.NWA51.Poltavets.island.service.AnimalFactory;
import com.javarush.NWA51.Poltavets.island.service.RandomValue;
import com.javarush.NWA51.Poltavets.island.service.SingleAnimalFactory;
import com.javarush.NWA51.Poltavets.island.service.dto.IslandConfigDTO;

import java.util.*;

public class Cell {
    private final int xAxis;                                                    // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —è—á–µ–π–∫–∏ –ø–æ x
    private final int yAxis;                                                    // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —è—á–µ–π–∫–∏ –ø–æ y
    private Double grass;                                                       // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–≤—ã –≤ —è—á–µ–π–∫–µ
    private int grassMax;                                                       // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–≤—ã –≤ —è—á–µ–π–∫–µ
    private int grassGrowth;                                                    // –°–∫–æ—Ä–æ—Å—Ç—å —Ä–æ—Å—Ç–∞ —Ç—Ä–∞–≤—ã –≤ —Å—É—Ç–∫–∏
    private final int soilType;                                                 // –¢–∏–ø –ø–æ—á–≤—ã
    private Map<Class<? extends Animals>, List<Animals>> AnimalsMap;           // –ö–∞—Ä—Ç–∞ –∫–ª–∞—Å—Å - –°–ø–∏—Å–æ–∫ –∂–∏–≤–æ—Ç–Ω—ã—Ö —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞

    private int bornTotal = 0;                                                 // –í—Å–µ–≥–æ —Ä–æ–¥–∏–ª–æ—Å—å –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤ –∫–ª–µ—Ç–∫–µ
    private int deadTotal = 0;                                                 // –í—Å–µ–≥–æ —É–º–µ—Ä–ª–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤ –∫–ª–µ—Ç–∫–µ

    public Cell(int xAxis, int yAxis, IslandConfigDTO parametersCell) {
        this.xAxis = xAxis;
        this.yAxis = yAxis;

        // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Ç–∏–ø –ø–æ—á–≤—ã –∏–ª–∏ —Å–ª—É—á–∞–π–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º
        switch (parametersCell.getSoilType()) {
            case 0, 1, 2, 3 -> this.soilType = parametersCell.getSoilType();
            default -> this.soilType = RandomValue.randomInt(0, 3);
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—Å—Ç–∞ —Ç—Ä–∞–≤—ã –∏ –º–∞–∫—Å–∏–º—É–º–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ—á–≤—ã
        switch (soilType) {
            case 0 -> { this.grassGrowth = parametersCell.getGrassGrowthDesert(); this.grassMax = parametersCell.getGrassMaxDesert(); }
            case 1 -> { this.grassGrowth = parametersCell.getGrassGrowthForest(); this.grassMax = parametersCell.getGrassMaxForest(); }
            case 2 -> { this.grassGrowth = parametersCell.getGrassGrowthSavvanna(); this.grassMax = parametersCell.getGrassMaxSavvanna(); }
            case 3 -> { this.grassGrowth = parametersCell.getGrassGrowthJungle(); this.grassMax = parametersCell.getGrassMaxJungle(); }
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–∞–≤—ã
        this.grass = RandomValue.randomDouble(0.0, grassMax * 1.0, 0.01);

        // –°–æ–∑–¥–∞—ë–º —Ñ–∞–±—Ä–∏–∫—É –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∂–∏–≤–æ—Ç–Ω—ã—Ö –¥–ª—è —è—á–µ–π–∫–∏
        AnimalFactory animalFactory = new AnimalFactory();
        try {
            this.AnimalsMap = animalFactory.createAnimal();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    // –°–±—Ä–æ—Å —Ñ–ª–∞–≥–æ–≤ –¥–≤–∏–∂–µ–Ω–∏—è –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤ –Ω–∞—á–∞–ª–µ –¥–Ω—è
    public void resetRunFlags() {
        for (List<Animals> list : AnimalsMap.values()) {
            for (Animals animal : list) {
                animal.setRun(false);
            }
        }
    }

    // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω—ã—Ö –ø–æ –æ—Å—Ç—Ä–æ–≤—É
    public void runAnimals(Cell[][] islands) {
        for (Map.Entry<Class<? extends Animals>, List<Animals>> entry : AnimalsMap.entrySet()) {
            List<Animals> animalList = entry.getValue();
            Iterator<Animals> iterator = animalList.iterator();
            while (iterator.hasNext()) {
                Animals animal = iterator.next();
                int newXAxis = xAxis;
                int newYAxis = yAxis;
                int xAxisMax = islands.length;
                int yAxisMax = islands[0].length;
                int buffer;

                // –ï—Å–ª–∏ –∂–∏–≤–æ—Ç–Ω–æ–µ –º–æ–∂–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è –∏ –µ—â—ë –Ω–µ –¥–≤–∏–≥–∞–ª–æ—Å—å
                if (animal.getSpeed() > 0 && !animal.isRun()) {
                    for (int i = 0; i < animal.getSpeed(); i++) {
                        int[] vector = RandomValue.randomVector();
                        if (vector[0] != 0 || vector[1] != 0) {
                            buffer = newXAxis;
                            newXAxis = newXAxis + vector[0];
                            if (newXAxis >= xAxisMax || newXAxis < 0) newXAxis = buffer;

                            buffer = newYAxis;
                            newYAxis = newYAxis + vector[1];
                            if (newYAxis >= yAxisMax || newYAxis < 0) newYAxis = buffer;
                        }
                    }
                }

                // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∂–∏–≤–æ—Ç–Ω–æ–µ, –µ—Å–ª–∏ —Ü–µ–ª–µ–≤–∞—è —è—á–µ–π–∫–∞ –Ω–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞
                if ((xAxis != newXAxis || yAxis != newYAxis) &&
                        islands[newXAxis][newYAxis].getNumbersOfAnimals(animal.getClass()) < animal.getValueMax()) {
                    islands[newXAxis][newYAxis].addAnimal(animal);
                    animal.setRun(true);
                    System.out.println(animal.getAnimalName() + " üêæ –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –∏–∑ X=" + xAxis + ", Y=" + yAxis +
                            " –≤ X=" + newXAxis + ", Y=" + newYAxis);
                    iterator.remove();
                }
            }
        }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –≤ —è—á–µ–π–∫—É
    public void addAnimal(Animals animal) {
        AnimalsMap.get(animal.getClass()).add(animal);
    }

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ—Ö –º—ë—Ä—Ç–≤—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏–∑ –∫–ª–µ—Ç–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    private int removeDeadAnimals() {
        int count = 0;
        for (List<Animals> list : AnimalsMap.values()) {
            Iterator<Animals> iterator = list.iterator();
            while (iterator.hasNext()) {
                Animals a = iterator.next();
                if (a.isDead()) {
                    System.out.println("‚ò† " + a.getAnimalName() + " —É–º–µ—Ä –≤ –∫–ª–µ—Ç–∫–µ X=" + xAxis + ", Y=" + yAxis);
                    iterator.remove();
                    count++;
                }
            }
        }
        return count;
    }

    // –†–æ—Å—Ç —Ç—Ä–∞–≤—ã –≤ —è—á–µ–π–∫–µ
    public void grassGrowt() {
        grass += grassGrowth;
        if (grass >= grassMax) grass = 1.0 * grassMax;
    }

    // –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –¥–µ–π—Å—Ç–≤–∏–π –∫–ª–µ—Ç–∫–∏ –∑–∞ –¥–µ–Ω—å
    public int[] nextDayCell() throws Exception {
        grassGrowt(); // —Ä–æ—Å—Ç —Ç—Ä–∞–≤—ã

        int birthCount = 0;

        // –ï–¥–∞ –∏ –æ—Ö–æ—Ç–∞
        List<Animals> animalsListEat = new ArrayList<>();
        for (List<Animals> list : AnimalsMap.values()) animalsListEat.addAll(list);
        Collections.shuffle(animalsListEat);

        // –ï–¥—è—Ç —Ç—Ä–∞–≤—É
        for (Animals animal : animalsListEat) {
            if (animal instanceof GrassEater && grass > 0) {
                double before = grass;
                grass = ((GrassEater) animal).eatGrass(grass);
                System.out.println("üåø " + animal.getAnimalName() + " —Å—ä–µ–ª —Ç—Ä–∞–≤—É: " + (before - grass) +
                        " –≤ –∫–ª–µ—Ç–∫–µ X=" + xAxis + ", Y=" + yAxis);
            }
        }

        // –û—Ö–æ—Ç–∞
        for (Animals animal : animalsListEat) {
            if (animal instanceof AnimalEater) {
                ((AnimalEater) animal).hunt(animalsListEat, this);
            }
        }

        // –í–æ–∑—Ä–∞—Å—Ç, –≥–æ–ª–æ–¥ –∏ —Ä–æ–∂–¥–µ–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω—ã—Ö
        for (Map.Entry<Class<? extends Animals>, List<Animals>> entry : AnimalsMap.entrySet()) {
            List<Animals> animalList = entry.getValue();
            List<Animals> tempAnimalList = new ArrayList<>();

            for (Animals animal : animalList) {
                animal.addAgeAnimals();   // –≤–æ–∑—Ä–∞—Å—Ç
                animal.animalHunger();    // –≥–æ–ª–æ–¥

                // –†–æ–∂–¥–µ–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω—ã—Ö
                if (!animal.isDead() && animal.birthAnimals(animalList)) {
                    Animals child = new SingleAnimalFactory().createAnimal(animal.getClass());
                    tempAnimalList.add(child);
                    birthCount++;
                    System.out.println("üë∂ –†–æ–¥–∏–ª—Å—è " + child.getAnimalName() + " –≤ –∫–ª–µ—Ç–∫–µ X=" + xAxis + ", Y=" + yAxis);
                }
            }
            animalList.addAll(tempAnimalList);
        }

        // –£–¥–∞–ª—è–µ–º –≤—Å–µ—Ö –º—ë—Ä—Ç–≤—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏ —Å—á–∏—Ç–∞–µ–º –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        int deadCount = removeDeadAnimals();

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º–∞—Ä–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        bornTotal += birthCount;
        deadTotal += deadCount;

        // –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–ª–µ—Ç–∫–µ
        int totalAnimals = 0;
        for (List<Animals> list : AnimalsMap.values()) totalAnimals += list.size();

        System.out.println("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–µ—Ç–∫–∏ X=" + xAxis + ", Y=" + yAxis + ": " +
                "–í—Å–µ–≥–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö=" + totalAnimals +
                ", –†–æ–¥–∏–ª–æ—Å—å=" + birthCount +
                ", –£–º–µ—Ä–ª–æ=" + deadCount +
                ", –¢—Ä–∞–≤–∞=" + grass);

        return new int[]{birthCount, deadCount};
    }

    // –ì–µ—Ç—Ç–µ—Ä—ã
    public int getSoilType() { return soilType; }
    public double getGrass() { return grass; }
    public int getGrassMax() { return grassMax; }
    public int getXAxis() { return xAxis; }
    public int getYAxis() { return yAxis; }
    public int getNumbersOfAnimals(Class<? extends Animals> animalType) { return AnimalsMap.get(animalType).size(); }
    public Map<Class<? extends Animals>, List<Animals>> getAnimalsMap() { return AnimalsMap; }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É–º–º–∞—Ä–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    public int getBornTotal() { return bornTotal; }
    public int getDeadTotal() { return deadTotal; }
}
